class Solution {
private:
    unordered_map < int, int > index;

    public:
    TreeNode * myBuildTree(const


vector < int > & preorder, const
vector < int > & inorder, int
preorder_left, int
preorder_right, int
inorder_left, int
inorder_right) {
if (preorder_left > preorder_right)
{
return nullptr;
}

// 前序遍历中的第一个节点就是根节点
int
preorder_root = preorder_left;
// 在中序遍历中定位根节点
int
inorder_root = index[preorder[preorder_root]];

// 先把根节点建立出来
TreeNode * root = new
TreeNode(preorder[preorder_root]);
// 得到左子树中的节点数目
int
size_left_subtree = inorder_root - inorder_left;
// 递归地构造左子树，并连接到根节点
            // 先序遍历中「从
左边界 + 1
开始的
size_left_subtree」个元素就对应了中序遍历中「从
左边界
开始到
根节点定位 - 1」的元素
root->left = myBuildTree(preorder, inorder, preorder_left + 1, preorder_left + size_left_subtree, inorder_left,
                         inorder_root - 1);
// 递归地构造右子树，并连接到根节点
            // 先序遍历中「从
左边界 + 1 + 左子树节点数目
开始到
右边界」的元素就对应了中序遍历中「从
根节点定位 + 1
到
右边界」的元素
root->right = myBuildTree(preorder, inorder, preorder_left + size_left_subtree + 1, preorder_right, inorder_root + 1,
                          inorder_right);
return root;
}

TreeNode * buildTree(vector < int > & preorder, vector < int > & inorder) {
int
n = preorder.size();
// 构造哈希映射，帮助我们快速定位根节点
for (int i = 0; i < n; ++i) {
    index[inorder[i]] = i;
}
return myBuildTree(preorder, inorder, 0, n - 1, 0, n - 1);
}
};

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not preorder or not inorder:  # 递归终止条件
            return
        root = TreeNode(preorder[0])  # 先序为“根左右”，所以根据preorder可以确定root
        idx = inorder.index(preorder[0])  # 中序为“左根右”，根据root可以划分出左右子树
        # 下面递归对root的左右子树求解即可
        root.left = self.buildTree(preorder[1:1 + idx], inorder[:idx])
        root.right = self.buildTree(preorder[1 + idx:], inorder[idx + 1:])
        return root

